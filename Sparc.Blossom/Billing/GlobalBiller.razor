@using Sparc.Blossom.Authentication
@using Sparc.Blossom.Billing
@using Microsoft.JSInterop
@using Sparc.Blossom.Realtime
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.Web
@implements IDisposable
@if (PaymentIntentId == null)
{
    <form id="payment-form" @onsubmit="Pay" @onsubmit:preventDefault="true">
        <CurrencySelector Avatar="Avatar" />
        <div id="@Id" @ref=PaymentForm>
            <p style="font-size: 16px">Loading payment form...</p>
        </div>

        @if (Intent != null)
        {
            <label>
                <span>Would you like an email receipt? Enter your email here (optional)</span>
                <input @bind="Order.Email" placeholder="Email" />
            </label>

            <label>
                <span>Enter the domain name where you will be installing Tovik:</span>
                <input @bind="Order.Domain" placeholder="example.com" required />
            </label>

            <div id="error-message">@ErrorMessage</div>

            <button id="submit-button" type="submit" class="btn primary-btn">
                Pay @Intent.FormattedAmount
            </button>
        }
    </form>
}
else if (Order?.PaymentIntentId != null)
{
    if (Order.FulfilledDate != null)
    {
        <header>
            <h2>Thank you for your purchase!</h2>
        </header>
        <div class="purchased">
            <p>Your Order ID is:</p>
            <h4>@Order.OrderId</h4>
            <p>Tovik Pro has been enabled on your account, and you can start configuring your domains right away!</p>
            <p>If you provided an email address, a receipt has been emailed to you.</p>
            <p>Thank you so much for supporting Tovik!</p>
            <a class="button primary-btn" href="/Install">Start Exploring Tovik</a>
        </div>
    }
    else
    {
        <header>
            <h2>Processing your payment...</h2>
        </header>
        <div class="processing">
            <p>This usually takes less than a minute. Please do not refresh or navigate away from this page.</p>
        </div>
    }
}


@inject IConfiguration Configuration
@inject SparcEvents Events
@inject ISparcBilling Billing
@inject IJSRuntime Js
@inject NavigationManager Nav
@code {
    [Parameter] public required string ProductId { get; set; } = default!;
    [Parameter] public required string StripeProductId { get; set; } = default!;
    [Parameter] public required BlossomAvatar Avatar { get; set; } = default!;
    [Parameter] public StripeAppearance? Appearance { get; set; }
    [Parameter][SupplyParameterFromQuery] public string? PaymentIntentId { get; set; }
    [Parameter] public string? Domain { get; set; }

    SparcOrder Order = new();
    SparcPaymentIntent? Intent;
    Lazy<Task<IJSObjectReference>> Auth = null!;
    ElementReference PaymentForm;
    string? ErrorMessage;
    string Id => $"payment-form-{Guid.NewGuid()}";
    record PaymentResult(bool Succeeded, string? ErrorMessage = null);

    protected override async Task OnInitializedAsync()
    {
        Auth = Js.Import("./Blossom/Billing/GlobalBiller.razor.js");
        Order.Currency = Avatar.Currency?.Id;
        Order.ProductId = ProductId;
        Order.StripeProductId = StripeProductId;

        Events.CurrencyChanged += OnCurrencyChanged;
        if (PaymentIntentId == null)
            await InitiateStripePayment();
        else
            await CheckOnStripePayment();
    }

    protected override void OnParametersSet()
    {
        if (Domain != null)
            Order.Domain = Domain;
    }

    private async Task OnCurrencyChanged(SparcCurrency currency)
    {
        Order.Currency = currency.Id;
        await InitiateStripePayment();
    }

    public async Task InitiateStripePayment()
    {
        try
        {
            ErrorMessage = null;
            Intent = await Billing.StartCheckoutAsync(Order);
            Order.PaymentIntentId = Intent.PaymentIntentId;

            StateHasChanged();

            var stripe = await Auth.Value;
            await stripe.InvokeVoidAsync("initialize", PaymentForm, Intent, Appearance);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Something went wrong! {ex.Message}";
            Console.Error.WriteLine($"Error creating PaymentIntent: {ex.Message}");
        }
    }

    public async Task CheckOnStripePayment()
    {
        Order = await Billing.GetOrderAsync(PaymentIntentId!);
        if (Order.PaymentIntentId != null && Order.FulfilledDate == null)
        {
            var timer = new PeriodicTimer(TimeSpan.FromSeconds(5));
            try
            {
                while (await timer.WaitForNextTickAsync())
                {
                    Order = await Billing.GetOrderAsync(PaymentIntentId!);
                    if (Order.FulfilledDate != null)
                    {
                        StateHasChanged();
                        break;
                    }
                }
            }
            finally
            {
                timer.Dispose();
            }
        }
    }

    public async Task Pay()
    {
        ErrorMessage = null;

        if (string.IsNullOrWhiteSpace(Order.Domain))
        {
            ErrorMessage = "Please enter a domain name for your Tovik installation.";
            return;
        }

        try
        {
            var domain = new SparcDomain(Order.Domain);

            if (Order.Email != null || domain != null)
                Intent = await Billing.StartCheckoutAsync(Order);

            var dotNetHelper = DotNetObjectReference.Create(this);

            var querySeparator = Nav.Uri.Contains('?') ? "&" : "?";
            var returnUrl = $"{Nav.Uri}{querySeparator}paymentIntentId={Intent!.PaymentIntentId}";
            var stripe = await Auth.Value;
            var result = await stripe.InvokeAsync<PaymentResult>("pay", returnUrl);
            if (result.Succeeded)
                Nav.NavigateTo(returnUrl, forceLoad: true);
            else
                ErrorMessage = result.ErrorMessage;
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
        }
    }

    [JSInvokable]
    public Task HandlePaymentSuccess()
    {
        Console.WriteLine("Payment successful signal received from JavaScript.");
        return InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Events.CurrencyChanged -= OnCurrencyChanged;
    }
}
