@using System.Threading.Tasks
@using System.Web
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Sparc.Blossom.Authentication

<div class="blossom-authenticator">
    <AuthorizeView>
        <Authorized>
            <figure class="@(context.User.IsAnonymous() ? "loggedout" : "loggedin")">
                <div class="icon">
                    <UserIcon LoggedIn="!context.User.IsAnonymous()" />
                </div>
            </figure>
        </Authorized>
        <NotAuthorized>
            @switch (Auth.LoginState)
            {
                case LoginStates.LoggedOut:
                    <button class="loggedout" @onclick="BeginLogin">
                        <div class="icon">
                            <UserIcon />
                        </div>
                    </button>
                    break;
                default:
                    <label @onclick="LoginAsync" class="@Auth.LoginState">
                        <div class="icon">
                            <UserIcon />
                        </div>
                        @if (Auth.LoginState == LoginStates.ReadyForLogin)
                        {
                            <input @ref=LoginInput type="text" @bind="Email" name="username" placeholder="Enter your email" autocomplete="username webauthn" @onclick:stopPropagation="true" />
                            <div class="icon submit">
                                OK
                            </div>
                        }
                        else if (Auth.LoginState == LoginStates.AwaitingMagicLink)
                        {
                            <span>Click the link in your email!</span>
                        }
                    </label>
                    break;
            }
        </NotAuthorized>
    </AuthorizeView>
</div>

@inject IBlossomAuthenticator Auth
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Token { get; set; }

    [CascadingParameter] public required ClaimsPrincipal User { get; set; }

    public string? Email;

    ElementReference? LoginInput;

    protected override async Task OnInitializedAsync()
    {
        if (Auth.User != null || !string.IsNullOrEmpty(Token))
        {
            await foreach (var state in Auth.Login(User, Token))
                StateHasChanged();
        }
    }

    async Task BeginLogin()
    {
        // Attempt autofill signin
        await foreach (var state in Auth.Login(User))
            StateHasChanged();

        if (Auth.LoginState == LoginStates.LoggedIn)
            return;
        
        Auth.LoginState = LoginStates.ReadyForLogin;
        StateHasChanged();
        await Task.Delay(1);
        if (LoginInput.HasValue)
            await LoginInput.Value.FocusAsync();
    }

    async Task LoginAsync()
    {
        if (string.IsNullOrWhiteSpace(Email))
            return;

        await foreach (var state in Auth.Login(User, Email))
            StateHasChanged();
    }

    async Task LogoutAsync()
    {
        await foreach (var state in Auth.Logout(User))
            StateHasChanged();
    }
}