@using System.Threading.Tasks
@using System.Web
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Sparc.Blossom.Authentication
@using Sparc.Blossom.Content

<AuthorizeView>
    <Authorized>
        <div class="blossom-authenticator @(context.User.IsAnonymous() ? "loggedout" : "loggedin")">
            @if (!IsOpen)
            {
                <button aria-label="Login" @onclick="ToggleLoginMenu">
                    <UserIcon LoggedIn="!context.User.IsAnonymous()" />
                </button>
            }
            else
            {
                <button class="close" @onclick=Close aria-label="Close">
                    <img src="_content/Sparc.Kori/icons/Close X.svg" />
                </button>
            }
        </div>

        @if (IsOpen)
        {
            <section>
                @switch (Auth.LoginState)
                {
                    case LoginStates.NotInitialized:
                    case LoginStates.LoggedOut:
                        <header>
                            <h3>Welcome!</h3>
                            <p>Lorem ipsum dolor sit amet, consectetur</p>
                        </header>

                        <nav>
                            <ul>
                                <li onclick="@(() => ChangeTab("login"))">Login</li>
                                <li onclick="@(() => ChangeTab("language"))">Language</li>
                            </ul>
                        </nav>

                        @if (Tab == "login")
                        {
                            <article>
                                <button @onclick=LoginWithPasskey>
                                    <img src="_content/Sparc.Kori/icons/Passkey.svg" />
                                    <div class="btn-wrapper">
                                        <figcaption>Passkey Login</figcaption>
                                        <aside>Set up your passkey</aside>
                                    </div>
                                </button>
                            </article>
                        }
                        else
                        {
                            <article>
                                <LanguageSelector SelectedLanguage="Auth.User.PrimaryLanguage" LanguageChanged="UpdateLanguage" />
                            </article>
                        }
                        break;
                }
            </section>
        }
    </Authorized>

</AuthorizeView>

@inject IBlossomAuthenticator Auth
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Token { get; set; }
    bool IsOpen;
    string Tab = "login";

    [CascadingParameter] public required ClaimsPrincipal User { get; set; }

    public string? Email;

    ElementReference? LoginInput;

    protected override async Task OnInitializedAsync()
    {
        if (Auth.User != null || !string.IsNullOrEmpty(Token))
        {
            await foreach (var state in Auth.Login(User, Token))
                StateHasChanged();
        }
    }

    void ChangeTab(string tab) => Tab = tab;

    async Task BeginLogin()
    {
        // Attempt autofill signin
        await foreach (var state in Auth.Login(User))
            StateHasChanged();

        if (Auth.LoginState == LoginStates.LoggedIn)
            return;

        Auth.LoginState = LoginStates.ReadyForLogin;
        StateHasChanged();
        await Task.Delay(1);
        if (LoginInput.HasValue)
            await LoginInput.Value.FocusAsync();
    }

    async Task LoginAsync()
    {
        if (string.IsNullOrWhiteSpace(Email))
            return;

        await foreach (var state in Auth.Login(User, Email))
            StateHasChanged();
    }

    async Task LogoutAsync()
    {
        await foreach (var state in Auth.Logout(User))
            StateHasChanged();
    }

    async Task UpdateLanguage(Language language)
    {
        // Auth.User.PrimaryLanguage = language;
    }
}