@* @using Sparc.Blossom.Authentication

<div class="user-profile-container" @onmouseover="() => IsHovered = true" @onmouseout="() => IsHovered = false">
    <div class="profile-picture-wrapper @(IsOnline ? "online" : "")">
        <div class="user-avatar"
             style="background-color:@CurrentUser?.Avatar.BackgroundColor; color:@CurrentUser?.Avatar.ForegroundColor;">
            @if (!string.IsNullOrEmpty(CurrentUser?.Avatar.Emoji))
            {
                @CurrentUser.Avatar.Emoji
            }
            else
            {
                @CurrentUser?.Avatar.Initials
            }
        </div>
    </div>

    @if (IsHovered)
    {
        @foreach (var action in ModalActions)
        {
            <button title="@action.Title" class="@action.CssClass" @onclick="@(() => OnShowModal(action.Type))">
                <img src="@action.Icon" alt="@action.Title Icon" />
            </button>
        }
    }
</div>

@if (ShowModal)
{
    @switch (InfoType)
    {
        case "Email":
            <Modal Title="Please enter your email:" OnClose="OnCancel" OnSave="OnSaveEmail">
                <EditEmail @bind-Email="Email" @bind-VerifyEmail="VerifyEmail" />
            </Modal>
            break;
        case "Phone":
            <Modal Title="Please enter your phone number:" OnClose="OnCancel" OnSave="OnSavePhone">
                <EditPhoneNumber @bind-PhoneNumber="PhoneNumber" @bind-VerifyPhone="VerifyPhone" />
            </Modal>
            break;
        case "Language":
            <Modal Title="Select Language" CssClass="language-modal" OnClose="OnCancel" ShowDefaultButtons="true" ShowSaveButton="false">
                <tovik-language></tovik-language>
            </Modal>
            break;
        case "Avatar":
            <Modal Title="Avatar:" OnClose="OnCancel" OnSave="OnSaveAvatar">
                <Sparc2.Profile.Avatar.EditAvatar User="@EditableAvatar" OnEmojiChanged="OnAvatarChanged" />
            </Modal>
            break;
    }
}

@if (ShowVerificationModal)
{
    <Verification CurrentVerificationDestination="@CurrentVerificationDestination"
                  OnCancel="OnCancelVerification"
                  OnVerify="VerifyCode" />
}

@inject IJSRuntime Js

@code {
    BlossomUser? CurrentUser;
    private string? SelectedLanguageId { get; set; }

    private bool IsHovered = false;
    private bool ShowModal = false;
    private string InfoType = string.Empty;

    private string? Email { get; set; }
    private string? PhoneNumber { get; set; }

    private bool VerifyEmail = false;
    private bool VerifyPhone = false;

    private string VerificationCode { get; set; } = "";
    private bool ShowVerificationModal = false;
    private string CurrentVerificationDestination = "";

    private BlossomAvatar EditableAvatar = new("", "");

    public bool IsOnline => CurrentUser is not null == true;
    private record ModalAction(string Type, string Title, string Icon, string CssClass);
    private List<ModalAction> ModalActions = new()
    {
        new("Email", "Email", "images/email.png", "top"),
        new("Phone", "Phone Number", "images/phone.png", "bottom"),
        new("Language", "Language", "images/language.png", "top-left"),
        new("Avatar", "Avatar", "images/user.png", "bottom-right")
    };


    protected override async Task OnInitializedAsync() => await GetUserInfo();

    private async Task GetUserInfo()
    {
        CurrentUser = await SparcEngine.UserInfo();
        // Email = CurrentUser?.Email ?? "";
        // PhoneNumber = CurrentUser?.PhoneNumber ?? "";
    }

    private async Task OnShowModal(string type)
    {
        InfoType = type;
        await Js.InvokeVoidAsync("disableBodyScrolling", true);

        if (CurrentUser is not null)
        {
            if (type == "Email")
            {
                Email = CurrentUser.Email ?? "";
                VerifyEmail = false;
            }
            else if (type == "Phone")
            {
                PhoneNumber = CurrentUser.PhoneNumber ?? "";
                VerifyPhone = false;
            }
            else if (type == "Avatar" && CurrentUser is not null)
            {
                if (EditableAvatar is null)
                    EditableAvatar = new("", "");

                EditableAvatar.Name = CurrentUser.Avatar.Name;
                EditableAvatar.BackgroundColor = CurrentUser.Avatar.BackgroundColor;
                EditableAvatar.Pronouns = CurrentUser.Avatar.Pronouns;
                EditableAvatar.Description = CurrentUser.Avatar.Description;
                EditableAvatar.Emoji = CurrentUser.Avatar.Emoji;
                EditableAvatar.Gender = CurrentUser.Avatar.Gender;
            }
        }

        ShowModal = true;
    }

    private async Task OnCancel()
    {
        ShowModal = false;
        InfoType = string.Empty;
        await Js.InvokeVoidAsync("disableBodyScrolling", false);
    }

    private async Task OnSaveEmail()
    {
        var request = new UpdateUserRequest
        {
            Email = Email,
            RequireEmailVerification = VerifyEmail
        };
        CurrentVerificationDestination = Email!;
        await SparcEngine.UpdateUser(request);
        ShowModal = false;
        InfoType = string.Empty;
        if (VerifyEmail)
        {
            VerificationCode = "";
            ShowVerificationModal = true;
        }
        await GetUserInfo();
    }

    private async Task OnSavePhone()
    {
        var request = new UpdateUserRequest
        {
            PhoneNumber = PhoneNumber,
            RequirePhoneVerification = VerifyPhone
        };
        CurrentVerificationDestination = PhoneNumber!;
        await SparcEngine.UpdateUser(request);
        ShowModal = false;
        InfoType = string.Empty;
        if (VerifyPhone)
        {
            VerificationCode = "";
            ShowVerificationModal = true;
        }
        await GetUserInfo();
    }

    private async Task OnSaveAvatar()
    {
        var avatarRequest = new UpdateAvatarRequest(
            Name: EditableAvatar.Name,
            BackgroundColor: EditableAvatar.BackgroundColor,
            Pronouns: EditableAvatar.Pronouns,
            Description: EditableAvatar.Description,
            Emoji: EditableAvatar.Emoji,
            Gender: EditableAvatar.Gender
        );
        await SparcEngine.UpdateAvatar(avatarRequest);

        ShowModal = false;
        InfoType = string.Empty;

        if (CurrentUser?.Avatar is not null)
        {
            CurrentUser.Avatar.Name = EditableAvatar.Name;
            CurrentUser.Avatar.BackgroundColor = EditableAvatar.BackgroundColor;
            CurrentUser.Avatar.Pronouns = EditableAvatar.Pronouns;
            CurrentUser.Avatar.Description = EditableAvatar.Description;
            CurrentUser.Avatar.Emoji = EditableAvatar.Emoji;
            CurrentUser.Avatar.Gender = EditableAvatar.Gender;
        }

        // StateHasChanged();

        // await GetUserInfo();
    }

    private void OnAvatarChanged(string emoji)
    {
        EditableAvatar.Emoji = emoji;
    }

    private async Task VerifyCode(string code)
    {
        VerificationCode = code;
        var success = await SparcEngine.VerifyCode(new VerificationRequest(CurrentVerificationDestination, VerificationCode));
        if (success)
        {
            ShowVerificationModal = false;
            await GetUserInfo();
            StateHasChanged();
        }
        else
        {
            // VerificationError = "Invalid verification code. Please try again.";
        }
    }

    private void OnLanguageChanged(string? languageId)
    {
        SelectedLanguageId = languageId;
    }

    private async Task OnCancelVerification()
    {
        ShowVerificationModal = false;
        VerificationCode = "";
        await Js.InvokeVoidAsync("disableBodyScrolling", false);
    }
}

 *@