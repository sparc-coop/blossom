<div class="account-btn" @onclick="OpenUserProfile">
    <ProfileIcon />
</div>

<dialog @ref=Dialog>
    <header>
        <div>
            <ProfileIcon />
            <h3>Profile</h3>
        </div>
        <button type="button" aria-label="Close" @onclick="@CloseUserProfile"><XIcon /></button>
    </header>
    <section>
        <div class="column">
            @if (UserAvatar.VerificationLevel == 0)
            {
                <LoginWithPasskey UserAvatar="UserAvatar" />
            }
            else if (UserAvatar.VerificationLevel == 1)
            {
                <LoginWithEmail UserAvatar="UserAvatar" />
            }
            else
            {
                <p>You are logged in and your data is protected.</p>
                <button @onclick=Logout>
                    Forget Me on this Device
                </button>
            }
            <section class="app-links">
                <Apps />
            </section>
        </div>

        <div class="column">
            <section class="profile-customization">
                <AvatarEditor UserAvatar="UserAvatar" />
            </section>
        </div>

        <div class="column">
            <section class="user-details">
                <ProfileEditor UserAvatar="UserAvatar" />
            </section>

            <section class="language-selector">
                <header>
                    <h4>Language</h4>
                </header>
                <tovik-language></tovik-language>
            </section>
        </div>
    </section>
</dialog>


@inject ISparcAura Aura
@inject IJSRuntime Js
@inject NavigationManager Nav
@code {
    ElementReference Dialog;

    public BlossomAvatar UserAvatar { get; set; } = new BlossomAvatar();

    protected override async Task OnInitializedAsync()
    {
        var user = await Aura.UserInfo();
        if (user != null)
            UserAvatar = user.Avatar;
    }

    private async Task Logout()
    {
        var confirm = await Js.InvokeAsync<bool>("confirm", "Are you sure you want to log out?");
        if (!confirm)
            return;

        var user = await Aura.Logout();
        UserAvatar = user.Avatar;
        Nav.Refresh(true);
    }

    private async Task OpenUserProfile()
    {
        await Js.InvokeVoidAsync("toggleDialog", Dialog, true);
    }

    private async Task CloseUserProfile()
    {
        await Js.InvokeVoidAsync("toggleDialog", Dialog, false);
    }
}
