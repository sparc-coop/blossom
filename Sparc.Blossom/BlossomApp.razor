@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using System.Security.Claims

@typeparam Program
@typeparam DefaultLayout

<Router AppAssembly="@typeof(Program).Assembly" AdditionalAssemblies="@AdditionalAssemblies">
    <Found Context="routeData">
        <CascadingValue Value="User">
            <Sparc.Blossom.Realtime.BlossomRealtimeHub>
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(DefaultLayout)">
                    <NotAuthorized>
                        @if (!context.User.Identity?.IsAuthenticated == true)
                        {
                            @*                     <RedirectToLogin />
                    *@      }
                        else if (NotAuthorized is not null)
                        {
                            @NotAuthorized
                        }
                        else
                        {
                            <div class="blossom-authentication">
                                You are not authorized to access
                                this resource.
                            </div>
                        }
                    </NotAuthorized>
                    <Authorizing>
                        @if (Authorizing is not null)
                        {
                            @Authorizing
                        }
                        else
                        {
                            <div class="blossom-authentication">
                                Logging you in...
                            </div>
                        }
                    </Authorizing>
                </AuthorizeRouteView>
                <FocusOnNavigate RouteData="routeData" Selector="h1" />
            </Sparc.Blossom.Realtime.BlossomRealtimeHub>
        </CascadingValue>
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(DefaultLayout)">
            @if (NotFound is not null)
            {
                @NotFound
            }
            else
            {
                <p>Sorry, there's nothing at this address.</p>
            }
        </LayoutView>
    </NotFound>
</Router>

@inject AuthenticationStateProvider Auth
@inject System.TimeProvider TimeProvider
@inject Microsoft.JSInterop.IJSRuntime Js

@code {
    [Parameter] public RenderFragment NotAuthorized { get; set; } = null!;
    [Parameter] public RenderFragment Authorizing { get; set; } = null!;
    [Parameter] public RenderFragment NotFound { get; set; } = null!;
    [Parameter] public RenderFragment Loading { get; set; } = null!;
    ClaimsPrincipal User = new(new ClaimsIdentity());

    protected override async Task OnInitializedAsync()
    {
        User = (await Auth.GetAuthenticationStateAsync()).User;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && TimeProvider is Sparc.Blossom.BrowserTimeProvider browserTimeProvider)
            await browserTimeProvider.InitializeAsync();
    }

    public System.Reflection.Assembly[] AdditionalAssemblies => typeof(DefaultLayout).Assembly.FullName == typeof(Program).Assembly.FullName
    ? new[] { this.GetType().Assembly }
        : new[] { this.GetType().Assembly, typeof(DefaultLayout).Assembly };
} 