@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using System.Security.Claims
@using System.Reflection

@* @typeparam Program
@typeparam DefaultLayout *@

<Router AppAssembly="@ProgramType.Assembly" AdditionalAssemblies="@GetAdditionalAssemblies()">
    <Found Context="routeData">
        <CascadingValue Value="User">
            <Sparc.Blossom.Realtime.BlossomRealtimeHub>
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@LayoutType">
                    <NotAuthorized>
                        @if (!context.User.Identity?.IsAuthenticated == true)
                        {
                            @*                     <RedirectToLogin />
                    *@      }
                        else if (NotAuthorized is not null)
                        {
                            @NotAuthorized
                        }
                        else
                        {
                            <div class="blossom-authentication">
                                You are not authorized to access
                                this resource.
                            </div>
                        }
                    </NotAuthorized>
                    <Authorizing>
                        @if (Authorizing is not null)
                        {
                            @Authorizing
                        }
                        else
                        {
                            <div class="blossom-authentication">
                                Logging you in...
                            </div>
                        }
                    </Authorizing>
                </AuthorizeRouteView>
                <FocusOnNavigate RouteData="routeData" Selector="h1" />
            </Sparc.Blossom.Realtime.BlossomRealtimeHub>
        </CascadingValue>
    </Found>
    <NotFound>
            <LayoutView Layout="@LayoutType">
            @if (NotFound is not null)
            {
                @NotFound
            }
            else
            {
                <p>Sorry, there's nothing at this address.</p>
            }
        </LayoutView>
    </NotFound>
</Router>

@inject AuthenticationStateProvider Auth
@code {
    [Parameter] public RenderFragment NotAuthorized { get; set; } = null!;
    [Parameter] public RenderFragment Authorizing { get; set; } = null!;
    [Parameter] public RenderFragment NotFound { get; set; } = null!;
    [Parameter] public RenderFragment Loading { get; set; } = null!;
    ClaimsPrincipal User = new(new ClaimsIdentity());

    [Parameter] public Type ProgramType { get; set; } = default!;
    [Parameter] public Type LayoutType { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        User = (await Auth.GetAuthenticationStateAsync()).User;
    }

    private Assembly[] GetAdditionalAssemblies()
    {
        if (LayoutType.Assembly.FullName == ProgramType.Assembly.FullName)
            return new[] { this.GetType().Assembly };

        return new[] { this.GetType().Assembly, LayoutType.Assembly };
    }

    // public System.Reflection.Assembly[] AdditionalAssemblies => typeof(DefaultLayout).Assembly.FullName == typeof(Program).Assembly.FullName
    // ? new[] { this.GetType().Assembly }
    //     : new[] { this.GetType().Assembly, typeof(DefaultLayout).Assembly };
} 