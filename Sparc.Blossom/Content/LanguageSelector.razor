@using System.Globalization
@using Microsoft.JSInterop
@using Sparc.Blossom.Authentication
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web


<div class="language-select-container">
    <div class="language-select @(IsVisible ? "show" : "")" translate="no">
        @if (NativeLanguageId != null && SelectedLanguageId != NativeLanguageId)
        {
            <button @onclick="@(() => SetLanguage(NativeLanguageId))">
                <Sparc.Blossom.Content.Icons.Back />
            </button>
        }
        <InputSelect @bind-Value="SelectedLanguageId" @bind-Value:after="ChangeLanguage">
            @foreach (var language in Languages.GroupBy(x => x.LanguageId).OrderBy(x => x.First().LanguageNativeName))
            {
                @if (language.Count() == 1)
                {
                    <option value="@language.First().Id">
                        @language.First().NativeName
                    </option>
                }
                else
                {
                    <optgroup label="@language.First().LanguageNativeName">
                        @foreach (var sublanguage in language.OrderBy(x => x.NativeName))
                        {
                            <option value="@sublanguage.Id">
                                @sublanguage.NativeName
                            </option>
                        }
                    </optgroup>
                }
            }
        </InputSelect>
        <div class="language-select-progress-bar @(IsLoading ? "show" : "")">
            <div class="progress-bar-value"></div>
        </div>
    </div>

    @if (WithButton)
    {
        <button class="secondary-btn @(IsVisible ? "selected" : "")" @onclick=ToggleVisibility>
            <Sparc.Blossom.Content.Icons.Globe />
        </button>
    }
</div>

@inject ITovik Tovik
@inject ISparcAura Aura
@inject IJSRuntime Js
@code {
    [Parameter] public string? InitialLanguageId { get; set; }
    [Parameter] public bool WithButton { get; set; } = false;
    [Parameter] public bool Visible { get; set; }
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public EventCallback<Language> OnLanguageChanged { get; set; }
    [SupplyParameterFromQuery] public string? Lang { get; set; }
    public string SelectedLanguageId = "";
    public bool IsSpinning;
    public bool IsVisible;
    void ToggleVisibility() => IsVisible = !IsVisible;
    string? NativeLanguageId;
    List<Language> Languages = [];

    protected override async Task OnInitializedAsync()
    {
        if (!WithButton || Visible) IsVisible = true;

        if (string.IsNullOrWhiteSpace(SelectedLanguageId))
            SelectedLanguageId = Lang
                ?? InitialLanguageId
                ?? string.Empty;

        Languages = Sparc.Blossom.Content.Language.All;

        // Fallback to server-side language list for WASM, which has a limited set
        if (Languages.Count < 300)
            Languages = (await Tovik.GetLanguages()).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        NativeLanguageId = await Js.InvokeAsync<string>("eval", "navigator.language");

        if (InitialLanguageId == null && string.IsNullOrWhiteSpace(SelectedLanguageId))
        {
            var tovikLanguage = await Js.InvokeAsync<string?>("eval", "localStorage.getItem('tovik-lang')")
                ?? NativeLanguageId;
            SelectedLanguageId = Language.Find(tovikLanguage)?.Id
                ?? Languages.FirstOrDefault(x => x.Id == tovikLanguage)?.Id
                ?? "";
            if (SelectedLanguageId != NativeLanguageId)
                IsVisible = true;
            StateHasChanged();
        }


        await ChangeLanguage();
    }

    public async Task SetLanguage(string id)
    {
        SelectedLanguageId = id;
        IsSpinning = false;
        await ChangeLanguage();
    }

    async Task ChangeLanguage()
    {
        var selectedLanguage = Languages.FirstOrDefault(x => x.Id == SelectedLanguageId);
        if (OnLanguageChanged.HasDelegate)
        {
            await OnLanguageChanged.InvokeAsync(selectedLanguage);
        }
        else
        {
            await NotifyTovik();
        }
    }

    async Task NotifyTovik()
        => await Js.InvokeVoidAsync("eval", "document.dispatchEvent(new CustomEvent('tovik-user-language-changed', { detail: '" + SelectedLanguageId + "' }));");
}