@page "/"
@using Sparc.Core.Chat
@using Sparc.Blossom.Authentication

<PageTitle>Home</PageTitle>

<div>
    <h3>Available Chat Rooms</h3>
    <ul>
        @if (rooms == null)
        {
            <li>Loading rooms...</li>
        }
        else if (!rooms.Any())
        {
            <li>No rooms available.</li>
        }
        else
        {
            @foreach (var room in rooms)
            {
                <li>
                    <button class="btn btn-link" @onclick="() => SelectRoom(room.Id)">
                        @room.RoomName
                    </button>
                </li>
            }
        }
    </ul>
    <h4>Define Status</h4>
    <select @onchange="HandlePresence">
        <option value="">Select...</option>
        <option value="online">Online</option>
        <option value="offline">Offline</option>
        <option value="unavailable">Unavailable</option>
    </select>
    <p>Current Status: @Avatar?.Presence</p>
</div>

<div>
    @if (!string.IsNullOrEmpty(RoomId))
    {
        <ChatRoom RoomId="@RoomId"></ChatRoom>
    }
</div>

@code {
    private string? RoomId { get; set; }
    private List<Room> rooms = [];
    private BlossomAvatar? Avatar;

    protected async override Task OnInitializedAsync()
    {
        var room = new Room("Test Room");
        // var newRoom = await Chat.CreateRoomAsync(room);

        rooms = await Chats.GetRoomsAsync();
        if (rooms.Any())
        {
            RoomId = rooms.First().Id;
        }
    }

    private void SelectRoom(string roomId)
    {
        RoomId = roomId;
        StateHasChanged();
    }

    private async Task HandlePresence(ChangeEventArgs e)
    {
        var selectedValue = e.Value?.ToString();

        var user = await Chats.GetUserAsync();
        Avatar = user;

        if (string.IsNullOrEmpty(selectedValue) || Avatar == null)
            return;

        Avatar.Presence = selectedValue;
        var presence = new MatrixPresence(Avatar);
        await Chats.SetPresenceAsync(Avatar.Id, presence);
    }
}